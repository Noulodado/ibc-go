// @generated
// This file is @generated by prost-build.
/// Token defines a struct which represents a token to be transferred.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Token {
    /// the token denomination
    #[prost(message, optional, tag="1")]
    pub denom: ::core::option::Option<Denom>,
    /// the token amount to be transferred
    #[prost(string, tag="2")]
    pub amount: ::prost::alloc::string::String,
}
impl ::prost::Name for Token {
const NAME: &'static str = "Token";
const PACKAGE: &'static str = "ibc.applications.transfer.v2";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v2.Token".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v2.Token".into() }}
/// Denom holds the base denom of a Token and a trace of the chains it was sent through.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Denom {
    /// the base token denomination
    #[prost(string, tag="1")]
    pub base: ::prost::alloc::string::String,
    /// the trace of the token
    #[prost(message, repeated, tag="3")]
    pub trace: ::prost::alloc::vec::Vec<super::v1::Hop>,
}
impl ::prost::Name for Denom {
const NAME: &'static str = "Denom";
const PACKAGE: &'static str = "ibc.applications.transfer.v2";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v2.Denom".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v2.Denom".into() }}
/// GenesisState defines the ibc-transfer genesis state
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    #[prost(string, tag="1")]
    pub port_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="2")]
    pub denoms: ::prost::alloc::vec::Vec<Denom>,
    #[prost(message, optional, tag="3")]
    pub params: ::core::option::Option<super::v1::Params>,
    /// total_escrowed contains the total amount of tokens escrowed
    /// by the transfer module
    #[prost(message, repeated, tag="4")]
    pub total_escrowed: ::prost::alloc::vec::Vec<::cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    /// forwarded_packets contains the forwarded packets stored as part of the
    /// packet forwarding lifecycle
    #[prost(message, repeated, tag="5")]
    pub forwarded_packets: ::prost::alloc::vec::Vec<ForwardedPacket>,
}
impl ::prost::Name for GenesisState {
const NAME: &'static str = "GenesisState";
const PACKAGE: &'static str = "ibc.applications.transfer.v2";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v2.GenesisState".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v2.GenesisState".into() }}
/// ForwardedPacket defines the genesis type necessary to retrieve and store forwarded packets.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ForwardedPacket {
    #[prost(message, optional, tag="1")]
    pub forward_key: ::core::option::Option<super::super::super::core::channel::v1::PacketId>,
    #[prost(message, optional, tag="2")]
    pub packet: ::core::option::Option<super::super::super::core::channel::v1::Packet>,
}
impl ::prost::Name for ForwardedPacket {
const NAME: &'static str = "ForwardedPacket";
const PACKAGE: &'static str = "ibc.applications.transfer.v2";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v2.ForwardedPacket".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v2.ForwardedPacket".into() }}
/// FungibleTokenPacketData defines a struct for the packet payload
/// See FungibleTokenPacketData spec:
/// <https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FungibleTokenPacketData {
    /// the token denomination to be transferred
    #[prost(string, tag="1")]
    pub denom: ::prost::alloc::string::String,
    /// the token amount to be transferred
    #[prost(string, tag="2")]
    pub amount: ::prost::alloc::string::String,
    /// the sender address
    #[prost(string, tag="3")]
    pub sender: ::prost::alloc::string::String,
    /// the recipient address on the destination chain
    #[prost(string, tag="4")]
    pub receiver: ::prost::alloc::string::String,
    /// optional memo
    #[prost(string, tag="5")]
    pub memo: ::prost::alloc::string::String,
}
impl ::prost::Name for FungibleTokenPacketData {
const NAME: &'static str = "FungibleTokenPacketData";
const PACKAGE: &'static str = "ibc.applications.transfer.v2";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v2.FungibleTokenPacketData".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v2.FungibleTokenPacketData".into() }}
/// FungibleTokenPacketDataV2 defines a struct for the packet payload
/// See FungibleTokenPacketDataV2 spec:
/// <https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FungibleTokenPacketDataV2 {
    /// the tokens to be transferred
    #[prost(message, repeated, tag="1")]
    pub tokens: ::prost::alloc::vec::Vec<Token>,
    /// the sender address
    #[prost(string, tag="2")]
    pub sender: ::prost::alloc::string::String,
    /// the recipient address on the destination chain
    #[prost(string, tag="3")]
    pub receiver: ::prost::alloc::string::String,
    /// optional memo
    #[prost(string, tag="4")]
    pub memo: ::prost::alloc::string::String,
    /// optional forwarding information
    #[prost(message, optional, tag="5")]
    pub forwarding: ::core::option::Option<ForwardingPacketData>,
}
impl ::prost::Name for FungibleTokenPacketDataV2 {
const NAME: &'static str = "FungibleTokenPacketDataV2";
const PACKAGE: &'static str = "ibc.applications.transfer.v2";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v2.FungibleTokenPacketDataV2".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v2.FungibleTokenPacketDataV2".into() }}
/// ForwardingPacketData defines a list of port ID, channel ID pairs determining the path
/// through which a packet must be forwarded, and the destination memo string to be used in the
/// final destination of the tokens.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ForwardingPacketData {
    /// optional memo consumed by final destination chain
    #[prost(string, tag="1")]
    pub destination_memo: ::prost::alloc::string::String,
    /// optional intermediate path through which packet will be forwarded.
    #[prost(message, repeated, tag="2")]
    pub hops: ::prost::alloc::vec::Vec<super::v1::Hop>,
}
impl ::prost::Name for ForwardingPacketData {
const NAME: &'static str = "ForwardingPacketData";
const PACKAGE: &'static str = "ibc.applications.transfer.v2";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v2.ForwardingPacketData".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v2.ForwardingPacketData".into() }}
/// QueryDenomRequest is the request type for the Query/Denom RPC
/// method
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDenomRequest {
    /// hash (in hex format) or denom (full denom with ibc prefix) of the on chain denomination.
    #[prost(string, tag="1")]
    pub hash: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryDenomRequest {
const NAME: &'static str = "QueryDenomRequest";
const PACKAGE: &'static str = "ibc.applications.transfer.v2";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v2.QueryDenomRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v2.QueryDenomRequest".into() }}
/// QueryDenomResponse is the response type for the Query/Denom RPC
/// method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDenomResponse {
    /// denom returns the requested denomination.
    #[prost(message, optional, tag="1")]
    pub denom: ::core::option::Option<Denom>,
}
impl ::prost::Name for QueryDenomResponse {
const NAME: &'static str = "QueryDenomResponse";
const PACKAGE: &'static str = "ibc.applications.transfer.v2";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v2.QueryDenomResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v2.QueryDenomResponse".into() }}
/// QueryDenomsRequest is the request type for the Query/Denoms RPC
/// method
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDenomsRequest {
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag="1")]
    pub pagination: ::core::option::Option<::cosmos_sdk_proto::cosmos::base::query::v1beta1::PageRequest>,
}
impl ::prost::Name for QueryDenomsRequest {
const NAME: &'static str = "QueryDenomsRequest";
const PACKAGE: &'static str = "ibc.applications.transfer.v2";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v2.QueryDenomsRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v2.QueryDenomsRequest".into() }}
/// QueryDenomsResponse is the response type for the Query/Denoms RPC
/// method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDenomsResponse {
    /// denoms returns all denominations.
    #[prost(message, repeated, tag="1")]
    pub denoms: ::prost::alloc::vec::Vec<Denom>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag="2")]
    pub pagination: ::core::option::Option<::cosmos_sdk_proto::cosmos::base::query::v1beta1::PageResponse>,
}
impl ::prost::Name for QueryDenomsResponse {
const NAME: &'static str = "QueryDenomsResponse";
const PACKAGE: &'static str = "ibc.applications.transfer.v2";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v2.QueryDenomsResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v2.QueryDenomsResponse".into() }}
// @@protoc_insertion_point(module)
