// @generated
// This file is @generated by prost-build.
/// Params defines the set of IBC transfer parameters.
/// NOTE: To prevent a single token from being transferred, set the
/// TransfersEnabled parameter to true and then set the bank module's SendEnabled
/// parameter for the denomination to false.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Params {
    /// send_enabled enables or disables all cross-chain token transfers from this
    /// chain.
    #[prost(bool, tag="1")]
    pub send_enabled: bool,
    /// receive_enabled enables or disables all cross-chain token transfers to this
    /// chain.
    #[prost(bool, tag="2")]
    pub receive_enabled: bool,
}
impl ::prost::Name for Params {
const NAME: &'static str = "Params";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.Params".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.Params".into() }}
/// Forwarding defines a list of port ID, channel ID pairs determining the path
/// through which a packet must be forwarded, and an unwind boolean indicating if
/// the coin should be unwinded to its native chain before forwarding.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Forwarding {
    /// optional unwinding for the token transfered
    #[prost(bool, tag="1")]
    pub unwind: bool,
    /// optional intermediate path through which packet will be forwarded
    #[prost(message, repeated, tag="2")]
    pub hops: ::prost::alloc::vec::Vec<Hop>,
}
impl ::prost::Name for Forwarding {
const NAME: &'static str = "Forwarding";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.Forwarding".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.Forwarding".into() }}
/// Hop defines a port ID, channel ID pair specifying where tokens must be forwarded
/// next in a multihop transfer.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hop {
    #[prost(string, tag="1")]
    pub port_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub channel_id: ::prost::alloc::string::String,
}
impl ::prost::Name for Hop {
const NAME: &'static str = "Hop";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.Hop".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.Hop".into() }}
/// Allocation defines the spend limit for a particular port and channel
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Allocation {
    /// the port on which the packet will be sent
    #[prost(string, tag="1")]
    pub source_port: ::prost::alloc::string::String,
    /// the channel by which the packet will be sent
    #[prost(string, tag="2")]
    pub source_channel: ::prost::alloc::string::String,
    /// spend limitation on the channel
    #[prost(message, repeated, tag="3")]
    pub spend_limit: ::prost::alloc::vec::Vec<::cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    /// allow list of receivers, an empty allow list permits any receiver address
    #[prost(string, repeated, tag="4")]
    pub allow_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// allow list of memo strings, an empty list prohibits all memo strings;
    /// a list only with "*" permits any memo string
    #[prost(string, repeated, tag="5")]
    pub allowed_packet_data: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Forwarding options that are allowed.
    #[prost(message, repeated, tag="6")]
    pub allowed_forwarding: ::prost::alloc::vec::Vec<AllowedForwarding>,
}
impl ::prost::Name for Allocation {
const NAME: &'static str = "Allocation";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.Allocation".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.Allocation".into() }}
/// AllowedForwarding defines which options are allowed for forwarding.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AllowedForwarding {
    /// a list of allowed source port ID/channel ID pairs through which the packet is allowed to be forwarded until final
    /// destination
    #[prost(message, repeated, tag="1")]
    pub hops: ::prost::alloc::vec::Vec<Hop>,
}
impl ::prost::Name for AllowedForwarding {
const NAME: &'static str = "AllowedForwarding";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.AllowedForwarding".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.AllowedForwarding".into() }}
/// TransferAuthorization allows the grantee to spend up to spend_limit coins from
/// the granter's account for ibc transfer on a specific channel
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferAuthorization {
    /// port and channel amounts
    #[prost(message, repeated, tag="1")]
    pub allocations: ::prost::alloc::vec::Vec<Allocation>,
}
impl ::prost::Name for TransferAuthorization {
const NAME: &'static str = "TransferAuthorization";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.TransferAuthorization".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.TransferAuthorization".into() }}
/// DenomTrace contains the base denomination for ICS20 fungible tokens and the
/// source tracing information path.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DenomTrace {
    /// path defines the chain of port/channel identifiers used for tracing the
    /// source of the fungible token.
    #[prost(string, tag="1")]
    pub path: ::prost::alloc::string::String,
    /// base denomination of the relayed fungible token.
    #[prost(string, tag="2")]
    pub base_denom: ::prost::alloc::string::String,
}
impl ::prost::Name for DenomTrace {
const NAME: &'static str = "DenomTrace";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.DenomTrace".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.DenomTrace".into() }}
/// QueryParamsRequest is the request type for the Query/Params RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {
}
impl ::prost::Name for QueryParamsRequest {
const NAME: &'static str = "QueryParamsRequest";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.QueryParamsRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.QueryParamsRequest".into() }}
/// QueryParamsResponse is the response type for the Query/Params RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// params defines the parameters of the module.
    #[prost(message, optional, tag="1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for QueryParamsResponse {
const NAME: &'static str = "QueryParamsResponse";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.QueryParamsResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.QueryParamsResponse".into() }}
/// QueryDenomHashRequest is the request type for the Query/DenomHash RPC
/// method
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDenomHashRequest {
    /// The denomination trace (\[port_id\]/[channel_id])+/\[denom\]
    #[prost(string, tag="1")]
    pub trace: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryDenomHashRequest {
const NAME: &'static str = "QueryDenomHashRequest";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.QueryDenomHashRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.QueryDenomHashRequest".into() }}
/// QueryDenomHashResponse is the response type for the Query/DenomHash RPC
/// method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDenomHashResponse {
    /// hash (in hex format) of the denomination trace information.
    #[prost(string, tag="1")]
    pub hash: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryDenomHashResponse {
const NAME: &'static str = "QueryDenomHashResponse";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.QueryDenomHashResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.QueryDenomHashResponse".into() }}
/// QueryEscrowAddressRequest is the request type for the EscrowAddress RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEscrowAddressRequest {
    /// unique port identifier
    #[prost(string, tag="1")]
    pub port_id: ::prost::alloc::string::String,
    /// unique channel identifier
    #[prost(string, tag="2")]
    pub channel_id: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryEscrowAddressRequest {
const NAME: &'static str = "QueryEscrowAddressRequest";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.QueryEscrowAddressRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.QueryEscrowAddressRequest".into() }}
/// QueryEscrowAddressResponse is the response type of the EscrowAddress RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEscrowAddressResponse {
    /// the escrow account address
    #[prost(string, tag="1")]
    pub escrow_address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryEscrowAddressResponse {
const NAME: &'static str = "QueryEscrowAddressResponse";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.QueryEscrowAddressResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.QueryEscrowAddressResponse".into() }}
/// QueryTotalEscrowForDenomRequest is the request type for TotalEscrowForDenom RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalEscrowForDenomRequest {
    #[prost(string, tag="1")]
    pub denom: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryTotalEscrowForDenomRequest {
const NAME: &'static str = "QueryTotalEscrowForDenomRequest";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest".into() }}
/// QueryTotalEscrowForDenomResponse is the response type for TotalEscrowForDenom RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalEscrowForDenomResponse {
    #[prost(message, optional, tag="1")]
    pub amount: ::core::option::Option<::cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
impl ::prost::Name for QueryTotalEscrowForDenomResponse {
const NAME: &'static str = "QueryTotalEscrowForDenomResponse";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse".into() }}
/// MsgTransfer defines a msg to transfer fungible tokens (i.e Coins) between
/// ICS20 enabled chains. See ICS Spec here:
/// <https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgTransfer {
    /// the port on which the packet will be sent
    #[prost(string, tag="1")]
    pub source_port: ::prost::alloc::string::String,
    /// the channel by which the packet will be sent
    #[prost(string, tag="2")]
    pub source_channel: ::prost::alloc::string::String,
    /// the token to be transferred. this field has been replaced by the tokens field.
    #[deprecated]
    #[prost(message, optional, tag="3")]
    pub token: ::core::option::Option<::cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    /// the sender address
    #[prost(string, tag="4")]
    pub sender: ::prost::alloc::string::String,
    /// the recipient address on the destination chain
    #[prost(string, tag="5")]
    pub receiver: ::prost::alloc::string::String,
    /// Timeout height relative to the current block height.
    /// The timeout is disabled when set to 0.
    #[prost(message, optional, tag="6")]
    pub timeout_height: ::core::option::Option<super::super::super::core::client::v1::Height>,
    /// Timeout timestamp in absolute nanoseconds since unix epoch.
    /// The timeout is disabled when set to 0.
    #[prost(uint64, tag="7")]
    pub timeout_timestamp: u64,
    /// optional memo
    #[prost(string, tag="8")]
    pub memo: ::prost::alloc::string::String,
    /// tokens to be transferred
    #[prost(message, repeated, tag="9")]
    pub tokens: ::prost::alloc::vec::Vec<::cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    /// optional forwarding information
    #[prost(message, optional, tag="10")]
    pub forwarding: ::core::option::Option<Forwarding>,
}
impl ::prost::Name for MsgTransfer {
const NAME: &'static str = "MsgTransfer";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.MsgTransfer".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.MsgTransfer".into() }}
/// MsgTransferResponse defines the Msg/Transfer response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgTransferResponse {
    /// sequence number of the transfer packet sent
    #[prost(uint64, tag="1")]
    pub sequence: u64,
}
impl ::prost::Name for MsgTransferResponse {
const NAME: &'static str = "MsgTransferResponse";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.MsgTransferResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.MsgTransferResponse".into() }}
/// MsgUpdateParams is the Msg/UpdateParams request type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    /// signer address
    #[prost(string, tag="1")]
    pub signer: ::prost::alloc::string::String,
    /// params defines the transfer parameters to update.
    ///
    /// NOTE: All parameters must be supplied.
    #[prost(message, optional, tag="2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParams {
const NAME: &'static str = "MsgUpdateParams";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.MsgUpdateParams".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.MsgUpdateParams".into() }}
/// MsgUpdateParamsResponse defines the response structure for executing a
/// MsgUpdateParams message.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {
}
impl ::prost::Name for MsgUpdateParamsResponse {
const NAME: &'static str = "MsgUpdateParamsResponse";
const PACKAGE: &'static str = "ibc.applications.transfer.v1";
fn full_name() -> ::prost::alloc::string::String { "ibc.applications.transfer.v1.MsgUpdateParamsResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/ibc.applications.transfer.v1.MsgUpdateParamsResponse".into() }}
// @@protoc_insertion_point(module)
